from openai import OpenAI
from config import OPENAI_API_KEY, MODEL_NAME
from crm_loader import load_crm_data
from prompts import build_prompt

client = OpenAI(api_key=OPENAI_API_KEY)

def get_ai_response(prompt: str) -> str:
    response = client.chat.completions.create(
        model=MODEL_NAME,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7
    )
    return response.choices[0].message.content

def main():
    try:
        client_id = int(input("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞ (1‚Äì5): "))
    except ValueError:
        print("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return

    crm = load_crm_data("crm_data.json", client_id)
    if not crm:
        print("[–û—à–∏–±–∫–∞] –ù–µ—Ç CRM-–¥–∞–Ω–Ω—ã—Ö. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return

    print(f"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {crm.get('name')}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    while True:
        user_input = input("–ö–ª–∏–µ–Ω—Ç: ").strip()
        if user_input.lower() in {"–≤—ã—Ö–æ–¥", "exit", "quit"}:
            print("ü§ñ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏.")
            break

        prompt = build_prompt(crm, user_input)
        reply = get_ai_response(prompt)
        print(f"–ò–ò-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫: {reply}\n")

if __name__ == "__main__":
    main()
