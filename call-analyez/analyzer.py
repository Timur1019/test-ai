def analyze_call(transcript: str) -> str:
    positive_signals = [
        "—É–¥–æ–±–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å", "–º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "–¥–∞–≤–∞–π—Ç–µ", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–≥–æ—Ç–æ–≤", "–Ω–∞–∑–Ω–∞—á–∏–º –≤—Å—Ç—Ä–µ—á—É"
    ]
    negative_signals = [
        "–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏", "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", "–¥–æ—Ä–æ–≥–æ", "—É–∂–µ –ø–æ–ª—å–∑—É–µ–º—Å—è"
    ]

    positives = [line for line in transcript.lower().splitlines() if any(p in line for p in positive_signals)]
    negatives = [line for line in transcript.lower().splitlines() if any(n in line for n in negative_signals)]

    result = []

    result.append(f"üëç –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(positives)}")
    for p in positives:
        result.append(f"   ‚úÖ {p.strip()}")

    result.append(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(negatives)}")
    for n in negatives:
        result.append(f"   ‚ùå {n.strip()}")


    recommendations = []
    if len(negatives) > 0:
        recommendations.append("–£—Ç–æ—á–Ω—è–π—Ç–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É.")
    if len(positives) == 0:
        recommendations.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    if "–≤—Ä—É—á–Ω—É—é" in transcript.lower():
        recommendations.append("–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.")

    result.append("\nüìå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for r in recommendations or ["–î–∏–∞–ª–æ–≥ –≤—ã–≥–ª—è–¥–∏—Ç —Ö–æ—Ä–æ—à–æ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç."]:
        result.append(f"   üí° {r}")

    return "\n".join(result)
